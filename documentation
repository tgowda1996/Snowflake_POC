Metadata:
- Passphrase: $Snowflake#CSCI_5751_2022!

Run steps:
- Creating a key:
    - Can’t use unencrypted keys for SnowSQL. 
    - Generate private key: openssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8
    - Generate public key: openssl rsa -in rsa_key.p8 -pubout -out rsa_key.pub
    - After you create the public and private key, use: alter user tgowda set rsa_public_key=‘<public key contents>’

- Run SnowSQL CLI
    - insert: private_key_path = <path>/rsa_key.p8 in ~/.snowsql/config
    - execute: export SNOWSQL_PRIVATE_KEY_PASSPHRASE='<passphrase>'. This can be put in your bash script or can be put in your .bashrc


- Instead of typing a bunch of options on the terminal, we can create a connection type in the config file. When we do this we only need to use "snowsql -c example" 
  in the terminal to login.


using or replace so that the script can be run multiple times. Maybe shoudl put guard code to check if something exists?? - Ask Chad
### Commands run

##### Create database
create database tbd_sales;

##### Create schema
create schema raw;
create schema curated;

##### Create stage
create stage s3_stage_customers
url = 's3://seng5709/customers/'
file_format = (type = CSV FIELD_DELIMITER = '|' SKIP_HEADER = 1);

create stage s3_stage_employees
url = 's3://seng5709/employees/'
file_format = (type = CSV FIELD_DELIMITER = ',' SKIP_HEADER = 1);

create stage s3_stage_products
url = 's3://seng5709/products/'
file_format = (type = CSV FIELD_DELIMITER = '|' SKIP_HEADER = 1);

create stage s3_stage_sales
url = 's3://seng5709/sales/'
file_format = (type = CSV FIELD_DELIMITER = '|' SKIP_HEADER = 1);

##### Create table definition
create table if not exists employees (
  EmployeeID int PRIMARY KEY,
  FirstName varchar,
  MiddleInitial varchar,
  LastName varchar,
  Region varchar
);

create table if not exists customers (
  CustomerID int PRIMARY KEY,
  FirstName varchar,
  MiddleInitial varchar,
  LastName varchar
);

-- ask chad if its supposed to be decimal or double?
create table if not exists products (
  ProductID int PRIMARY KEY,
  Name varchar,
  Price DOUBLE  
);

create table if not exists sales (
  OrderID int PRIMARY KEY,
  SalesPersonID int FOREIGN KEY REFERENCES employees(EmployeeID),
  CustomerID int FOREIGN KEY REFERENCES customers(CustomerID),
  ProductID int FOREIGN KEY REFERENCES products(ProductID),
  Quantity int,
  Date_of_sale timestamp
);

##### Load data into table
copy into customers
from @s3_stage_customers
pattern='.*Customers[0-9]*\.csv';

copy into employees
from @s3_stage_employees
pattern='.*Employees[0-9]*\.csv';

copy into products
from @s3_stage_products
pattern='.*Products[0-9]*\.csv';

copy into sales
from @s3_stage_sales
pattern='.*Sales[0-9]*\.csv';


##### Create tables in curated schema
create table if not exists sales as select * from tbd_sales.raw.sales;
create table if not exists employees as select * from tbd_sales.raw.employees;
create table if not exists customers as select * from tbd_sales.raw.customers;
create table if not exists products as select * from tbd_sales.raw.products as p where p.Price>0;



##### Drop all tables, views, schema and database
drop table if exists sales;
drop table if exists employees;
drop table if exists customers;
drop table if exists products;

drop stage if exists s3_stage_customers;
drop stage if exists s3_stage_employees;
drop stage if exists s3_stage_products;
drop stage if exists s3_stage_sales;

drop schema if exists raw;


drop view if exists customer_monthly_sales_2019_view;
drop view if exists top_ten_customers_amount_view;
drop view if exists product_sales_view;

drop table if exists curated.sales;
drop table if exists curated.employees;
drop table if exists curated.customers;
drop table if exists curated.products;

drop function if exists get_month(timestamp);

drop schema if exists curated;


drop database if exists tbd_sales;



- Given
    - Need to use an external stage - Load data to a stage (2 and 3 can be combined in one step with an external stage)

- Quality checks done
    - Sales
        - null check for all cols - PASS
        - check if quantity is less than 0 - PASS
        - check the range of sales. Was between 2018 and 2020 which seems to be sane values - PASS
        - check if orderid is unique - PASS
    - Products
        - check if price is less than 0 - PASS
        - check if price is equal to 0 - FAIL (48 products) - Ask Chad: Do I need to delete the sales records corresponding to this product?
        - null check for all cols - PASS
        - check if all names are unique and flag if requried. - PASS
    - Employee
        - null check for firstname, lastname and region - PASS
    - Customers
        - null check for firstname, lastname and region - PASS
    - Join check:
        - check if sales has any invalid foreign key



- Ask Chad:
 in the first view what is total amount. Is it the sum of quantity or sum of sales?


- TODO:
    - Use this doc to make a sql script for setup and tear down.
    - Complete materialized view requirement.
    - Make runbook
    - Verify sanity.